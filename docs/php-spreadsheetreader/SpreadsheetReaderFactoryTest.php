<?php
// Call SpreadsheetReaderFactoryTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "SpreadsheetReaderFactoryTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'SpreadsheetReaderFactory.php';

/**
 * Test class for SpreadsheetReaderFactory.
 * Generated by PHPUnit_Util_Skeleton on 2007-03-07 at 01:42:20.
 */
class SpreadsheetReaderFactoryTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("SpreadsheetReaderFactoryTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * Test for OpenDocumentSheetReader
     */
    public function testOdsReader() {
        // Remove the following line when you implement this test.
        $xlsFilePath = 'OpenDocumentSheet/test.ods';
        $reader = SpreadsheetReaderFactory::reader($xlsFilePath);
        $sheets = $reader->read($xlsFilePath);

        $this->assertEquals(2, count($sheets));
        $this->assertEquals(130, count($sheets[0]));
        $this->assertEquals(38, count($sheets[1]));
        $this->assertEquals(11, count($sheets[0][0]));
        $this->assertContains('324203026', $sheets[0][3]);
        $columnB = ord('B') - ord('A');
        $this->assertEquals(170292, $sheets[1][37][$columnB]);
    }
    /**
     * Test for CSVReader
     */
    public function testCsvReader() {
        // Remove the following line when you implement this test.
        $xlsFilePath = 'CSV/test.csv';
        $reader = SpreadsheetReaderFactory::reader($xlsFilePath);
        $sheets = $reader->read($xlsFilePath);

        $this->assertEquals(1, count($sheets));
        $this->assertEquals(128, count($sheets[0]));
        $this->assertEquals(11, count($sheets[0][0]));
        $this->assertContains('324203026', $sheets[0][3]);
        $this->assertEquals('153186', $sheets[0][19][1]);
    }
    /**
     * Test for ExcelReader
     */
    public function testXlsReader() {
        // Remove the following line when you implement this test.
        $xlsFilePath = 'Excel/test.xls';
        $reader = SpreadsheetReaderFactory::reader('xls');
        $sheets = $reader->read($xlsFilePath);

        $this->assertEquals(2, count($sheets));
        $this->assertEquals(129, count($sheets[0]));
        $this->assertEquals(38, count($sheets[1]));
        $this->assertEquals(6, count($sheets[0][0]));
        $this->assertContains('324203026', $sheets[0][4]);
        $columnB = ord('B') - ord('A');
        $this->assertEquals(170292, $sheets[1][37][$columnB]);
    }

    /**
     * Test for TextReader
     */
    public function testReadFromTextFileWithPattern() {
        $sheetFilePath = 'Text/test2.txt';
        $reader = SpreadsheetReaderFactory::reader('txt');

        $pattern = '/(?P<ean>\d{1,13})\s*(\d+)?/';
        $reader->pattern($pattern);
        $sheets = $reader->read($sheetFilePath);

        $this->assertEquals(1, count($sheets));
        $this->assertEquals(103, count($sheets[0]));

        $this->assertEquals(101090035, $sheets[0][0][0]);
        $this->assertEquals(1800, $sheets[0][1][1]);

        $this->assertEquals(1040100762215, $sheets[0][2][0]);
        $this->assertEquals(100100, $sheets[0][2][1]);

        $this->assertFalse(isset($sheets[0][7][1]));
    }

    /**
     * Test for XmlReader
     */
    public function testReadFromExcel2kXmlFile() {
        $sheetFilePath = 'test.excel2k.xml';
        $reader = SpreadsheetReaderFactory::reader($sheetFilePath);
        $sheets = $reader->read($sheetFilePath);

        $this->assertTrue($sheets !== false);
        $this->assertEquals(3, count($sheets));
        $this->assertEquals('c', $sheets[0][2][5]);
    }

    public function testReadFromXmlFile() {
        $sheetFilePath = 'test.workbook.xml';
        $reader = SpreadsheetReaderFactory::reader($sheetFilePath);
        $sheets = $reader->read($sheetFilePath);

        $this->assertTrue($sheets !== false);
        $this->assertEquals(1, count($sheets));
        $this->assertEquals(129, count($sheets[0]));
        $this->assertEquals(2, $sheets[0][8][0]);
        $this->assertEquals(126779, $sheets[0][8][1]);
        $this->assertEquals(121188, $sheets[0][8][10]);
    }
}

// Call SpreadsheetReaderFactoryTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "SpreadsheetReaderFactoryTest::main") {
    SpreadsheetReaderFactoryTest::main();
}
?>
